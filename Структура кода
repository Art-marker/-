_**Структура кода**_

     .Переменная любого типа должна вызываться только после своего объявления. Иначе будет ошибка

     .Объявление и использование классов или типов данных из библиотеки/файла должно быть после подключения библиотеки/файла

     .Функция может вызываться как до, так и после объявления, потому что C++ компилируемый язык, компиляция проходит в несколько этапов, и функции 
       "выделяются" отдельно, поэтому могут вызываться в любом месте программы

При запуске Arduino IDE даёт нам заготовку в виде двух обязательных функций: setup() и loop()

![](https://alexgyver.ru/wp-content/uploads/2021/07/blank.jpg)

Код в блоке setup() выполняется один раз при каждом запуске МК. Код в блоке loop() выполняется "по кругу" на всём протяжении работы программы, начиная с момента завершения выполнения setup(). Для любознательных: если вы уже знакомы с языком C++, то вероятно спросите "а где же int main() и вообще файл main.cpp?". Всё очень просто: int main() за вас уже написали внутри файла main.cpp, который лежит глубоко в файлах "ядра", а setup() и loop() встроены в него следующим образом:


      // main.cpp
      // где-то в глубинах ядра Arduino
      int main() {
        setup();    
          for (;;) {
            loop();
          }        
        return 0;
      }
Структура скетча:

**1**.Описание прошивки, ссылки, заметки

**2**.Константы-настройки (define и обычные)

**3**.Служебные константы (которые следует менять только с полным осознанием дела)

**4**.Подключаемые библиотеки и внешние файлы, объявление соответствующих им типов данных и классов

**5**.Глобальные переменные

**6**.setup()

**7**.loop()

**8**.Свои функции

_**Подключение библиотек и файлов**_

В реальной работе вы очень часто будете использовать библиотеки или просто внешние файлы, они подключаются в главный файл (файлу прошивки) при помощи директивы #include. Данная команда сообщает компилятору, что нужно найти и добавить в программу указанный файл. Этот файл может содержать свои #include и тянуть за собой и другие файлы, таким образом программа может быть разбита на множество независимых файлов. Рассмотрим пример:


      #include <Servo.h> // подключает библиотеку Servo.h

      #include “Servo.h” // тоже подключает библиотеку Servo.h

В чём отличие <> и ""? Когда указываем название "в кавычках", компилятор сначала ищет файл в папке со скетчем, а затем в папке с библиотеками. При использовании <галочек> компилятор ищет файл только в папке с библиотеками! К слову о папках с библиотеками: их две, в обеих будет производиться поиск библиотек.


      Пользовательская папка: Документы/Arduino/libraries. Сюда библиотеки попадают при добавлении их через "подключить .zip библиотеку" и при установке из менеджера библиотек.

      Папка с программой: C:/Program Files (x86)/Arduino/libraries (или C:/Program Files/Arduino/libraries для 32-разрядной Windows). Здесь хранятся встроенные стандартные библиотеки.

_**Горячие клавиши:**_

      .Ctrl+← , Ctrl+→ – переместить курсор влево/вправо НА ОДНО СЛОВО
      .Home , End – переместить курсор в начало/конец строки
      .Shift+← , Shift+→ – выделить символ слева/справа от курсора
      .Shift+Ctrl+← , Shift+Ctrl+→ – выделить слово слева/справа от курсора
      .Shift+Home , Shift+End – выделить все символы от текущего положения курсора до начала/конца строки
      .Ctrl+Z – отменить последнее действие
      .Ctrl+Y – повторить отменённое действие
      .Ctrl+C – копировать выделенный текст
      .Ctrl+X – вырезать выделенный текст
      .Ctrl+V – вставить текст из буфера обмена

Местные сочетания:


      .Ctrl+U – загрузить прошивку в Arduino
      .Ctrl+R – скомпилировать (проверить)
      .Ctrl+Shift+M – открыть монитор порта
      .Ctrl+T - автоформатирование
